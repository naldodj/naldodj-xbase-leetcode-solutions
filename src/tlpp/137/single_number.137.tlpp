/*
    137. Single Number II

    Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.

    You must implement a solution with a linear runtime complexity and use only constant extra space.

    Example 1:

    Input: nums = [2,2,3,2]
    Output: 3

    Example 2:

    Input: nums = [0,1,0,1,0,1,99]
    Output: 99

    Constraints:

    1 <= nums.length <= 3 * 104
    -2^31 <= nums[i] <= 2^31 - 1

    Each element in nums appears exactly three times except for one element which appears once.

    Released to Public Domain.
    --------------------------------------------------------------------------------------
*/

#include "dna.tech.leetcode.th"

namespace dna.tech.leetcode

function u_MainSingleNumber_137()

    local aNumbers as array
    local nOne as numeric

    // Case 2: Numbers appear three times
    aNumbers:={6,5,9,6,4,1,7,7,3,6,10,3,9,8,5,7,10,10,3,1,4,4,5,8,2,1,8,9}
    ? "Input Array (Three Times): ",aNumbers,"<br/>"
    nOne:=singleNumber(aNumbers)
    ? "The Single Number is: ",nOne,"<br/>","<br/>"

    ApMsgInfo(__getOutStd(),ProcName())

return nil

// Function to find the single number in the array
static function singleNumber(aNumbers as array)

    local i,nLen as numeric
    local nOne:=0 as numeric
    local nNoOne:=0 as numeric

    // Define precisao decimal para evitar arredondamentos
    set(_SET_DECIMALS,0)

    nLen:=Len(aNumbers)

    // Case 2: Numbers appear three times
    for i:=1 to nLen
        nOne:=nAnd(nXor(nOne,aNumbers[i]),nNot(nNoOne))
        nNoOne:=nAnd(nXor(nNoOne,aNumbers[i]),nNot(nOne))
    next i

    return nOne
