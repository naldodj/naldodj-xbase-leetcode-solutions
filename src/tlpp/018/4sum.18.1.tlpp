/*
    18. 4Sum

    Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

    0 <= a, b, c, d < n
    a, b, c, and d are distinct.
    nums[a] + nums[b] + nums[c] + nums[d] == target

    You may return the answer in any order.

    Example 1:
    Input: nums = [1,0,-1,0,-2,2], target = 0
    Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

    Example 2:
    Input: nums = [2,2,2,2,2], target = 8
    Output: [[2,2,2,2]]

    Constraints:

        1 <= nums.length <= 200
    -10^9 <= nums[i] <= 10^9
    -10^9 <= target <= 10^9

    Released to Public Domain.
    --------------------------------------------------------------------------------------

*/
#include "dna.tech.leetcode.th"

namespace dna.tech.leetcode

procedure u_Main4Sum_18_1()

    local aInput as array
    local aInputs as array
    local aOutPut as array

    local cHTML as character

    local lMatched as logical

    local nIdx as numeric
    local nTarget as numeric

    aInputs:=Array(0)

    // Casos de teste definidos
    aAdd(aInputs,{{{-2,-1,1,2},{-2,0,0,2},{-1,0,0,1}},{1,0,-1,0,-2,2},0})
    aAdd(aInputs,{{{2,2,2,2}},{2,2,2,2,2},8})

    cHTML:="<table border='1' cellpadding='5' cellspacing='0' style='width:100%; height:auto;'>"
    cHTML+=    "<thead>"
    cHTML+=        "<tr style='background-color: #999; color: white; text-align: center;'>"
    cHTML+=            "<th>Input</th>"
    cHTML+=            "<th>OutPut</th>"
    cHTML+=            "<th>Expected</th>"
    cHTML+=            "<th>Matched</th>"
    cHTML+=        "</tr>"
    cHTML+=    "</thead>"
    cHTML+=    "<tbody>"

    // Itera sobre os casos de teste
    for nIdx:=1 to Len(aInputs)
        aInput:=aInputs[nIdx][2] // Entrada atual
        nTarget:=aInputs[nIdx][3]
        aOutPut:=FourSum(aInput,nTarget) // Resultado da função FourSum
        lMatched:=(hb_JSONEncode(aOutPut)==hb_JSONEncode(aInputs[nIdx][1])) // Verifica correspondência com o esperado
        // Gera uma linha na tabela HTML
        cHTML+=        "<tr>"
        cHTML+=            "<td align='left' style='background-color:"+if(lMatched,"#22560D","#E4080A")+";'>"+hb_JSONEncode(aInput)+"</td>"
        cHTML+=            "<td align='center' style='background-color:"+if(lMatched,"#22560D","#E4080A")+";'>"+hb_JSONEncode(aOutPut)+"</td>"
        cHTML+=            "<td align='center' style='background-color:"+if(lMatched,"#22560D","#E4080A")+";'>"+hb_JSONEncode(aInputs[nIdx][1])+"</td>"
        cHTML+=            "<td align='center' style='background-color:"+if(lMatched,"#22560D","#E4080A")+";'>"+hb_JSONEncode(lMatched)+"</td>"
        cHTML+=        "</tr>"
    next nIdx

    cHTML+=    "</tbody>"
    cHTML+="</table>"

    // Exibe a tabela HTML no console
    ? cHTML

    ApMsgInfo(__getOutStd(),ProcName())

    return

static function FourSum(aNums as array,nTarget as numeric) as array

    local aResult

    local i, j, nSum, nLen, nLeft, nRight as numeric

    aResult:=Array(0)
    nLen:=Len(aNums)

    // Ordena o array para facilitar a busca com dois ponteiros
    aSort(@aNums)

    // Percorre os elementos para formar os quadruplos
    for i:=1 to nLen - 3
        // Evita duplicatas no primeiro número
        if ((i>1).and.(aNums[i]==aNums[i-1]))
            loop
        endif
        for j:=i+1 to nLen-2
            // Evita duplicatas no segundo número
            if ((j>i+1).and.(aNums[j]==aNums[j-1]))
                loop
            endif
            // Dois ponteiros: um no início (nLeft) e outro no final (nRight)
            nLeft:=j+1
            nRight:=nLen
            while (nLeft<nRight)
                nSum:=aNums[i]+aNums[j]+aNums[nLeft]+aNums[nRight]
                if (nSum==nTarget)
                    aAdd(aResult,{aNums[i],aNums[j],aNums[nLeft],aNums[nRight]})
                    // Evita duplicatas no terceiro número
                    while ((nLeft<nRight).and.(aNums[nLeft]==aNums[nLeft+1]))
                        nLeft++
                    end while
                    // Evita duplicatas no quarto número
                    while ((nLeft<nRight).and.(aNums[nRight]==aNums[nRight-1]))
                        nRight--
                    end while
                    nLeft++
                    nRight--
                elseif (nSum<nTarget)
                    nLeft++
                else
                    nRight--
                endif
            end while
        next j
    next i

    return(aResult)
