/*
    136. Single Number

    Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

    You must implement a solution with a linear runtime complexity and use only constant extra space.

    Example 1:

    Input: nums = [2,2,1]
    Output: 1

    Example 2:

    Input: nums = [4,1,2,1,2]
    Output: 4

    Example 3:

    Input: nums = [1]
    Output: 1

    Constraints:

    1 <= nums.length <= 3 * 10^4
    -3 * 10^4 <= nums[i] <= 3 * 10^4

    Each element in the array appears twice except for one element which appears only once.

    Released to Public Domain.
    --------------------------------------------------------------------------------------

*/

#include "dna.tech.leetcode.th"

namespace dna.tech.leetcode

function u_MainSingleNumber_136()

    local aNumbers as array
    local nOne as numeric

    // Case 1: Numbers appear two times
    aNumbers:={2,3,4,1,4,3,2}
    ? "Input Array (Two Times): ",aNumbers,"<br/>"
    nOne:=singleNumber(aNumbers)
    ? "The Single Number is: ",nOne,"<br/>","<br/>"

    ApMsgInfo(__getOutStd(),ProcName())

return nil

// Function to find the single number in the array
static function singleNumber(aNumbers as array)

    local nOne:=0 as numeric

    // Define precisao decimal para evitar arredondamentos
    set(_SET_DECIMALS,0)

    // Case 1: Numbers appear two times
    aEval(aNumbers,{|n|nOne:=nXor(nOne,n)})

    return nOne
