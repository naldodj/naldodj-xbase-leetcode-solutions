/*
    7. Reverse Integer

    Given a signed 32-bit integer x, return x with its digits reversed. if reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31 - 1], then return(0).

    Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

    Example 1:

    Input: x = 123
    Output: 321

    Example 2:

    Input: x = -123
    Output: -321

    Example 3:

    Input: x = 120
    Output: 21

    Constraints:

    -2^31 <= x <= 2^31 - 1

    Released to Public Domain.
    --------------------------------------------------------------------------------------

*/
namespace dna.tech.leetcode

static __cOut:="" as character

#xcommand ?  [ <vList,...> ] => ( [, __cOut+=__ConOut( <vList> ) ] )

#xtranslate "</br>" => chr(13)+chr(10)

//TL++ nao tem suporte, ainda, para notacao Hexadecimal de forna nativa
#xtranslate 0x0 => __HexToDec("0x0")
#xtranslate 0xA => __HexToDec("0xA")
#xtranslate 0x80000000 => __HexToDec("0x80000000")
#xtranslate -0x80000000 =>__HexToDec("-0x80000000")
#xtranslate 0x7FFFFFFF => __HexToDec("0x7FFFFFFF")

procedure u_MainReverseInteger_7_3()

    local nInput as numeric
    local nOutPut as numeric

    nInput:=123
    ? "Input: ",nInput,"</br>"
    nOutPut:=ReverseNumber(nInput)
    ? "Output: ",hb_NToC(nOutPut),"</br>","</br>"

    nInput*=-1
    ? "Input: ",nInput,"</br>"
    nOutPut:=ReverseNumber(nInput)
    ? "Output: ",hb_NToC(nOutPut),"</br>","</br>"

    nInput:=7463847412
    ? "Input: ",nInput,"</br>"
    nOutPut:=ReverseNumber(nInput)
    ? "Output: ",hb_NToC(nOutPut),"</br>","</br>"

    nInput:=-8463847412
    ? "Input: ",nInput,"</br>"
    nOutPut:=ReverseNumber(nInput)
    ? "Output: ",hb_NToC(nOutPut),"</br>","</br>"

    nInput:=0x7FFFFFFF
    ? "Input: ",nInput,"</br>"
    nOutPut:=ReverseNumber(nInput)
    ? "Output: ",hb_NToC(nOutPut),"</br>","</br>"

    nInput:=-0x80000000
    ? "Input: ",nInput,"</br>"
    nOutPut:=ReverseNumber(nInput)
    ? "Output: ",hb_NToC(nOutPut),"</br>","</br>"

    MsgInfo(__cOut,ProcName())

    __cOut:=""

    return

static function ReverseNumber(nNumber as numeric,nMin as numeric,nMax as numeric)

    local nAbs:=Abs(nNumber) as numeric // Trabalha com o valor absoluto
    local nMult:=0xA as numeric
    local nSign:=if(nNumber<0,-1,1)as numeric // Armazena o sinal
    local nDigit // Armazena o digito extraido
    local nReversed:=0x0 as numeric // Armazena o numero revertido
    local nReversedSign // Armazena o numero revertido com o sinal

    hb_Default(@nMin,-0x80000000)
    hb_Default(@nMax,0x7FFFFFFF)

    while (nAbs>0x0)

        nDigit:=(nAbs%nMult) // Extrai o ultimo digito
        nAbs:=(Int(nAbs/nMult)) // Remove o ultimo digito

        // Verifica possivel estouro de 32 bits
        nReversedSign:=nReversed*nSign
        if ((nReversedSign<nMin).or.(nReversedSign>nMax))
            exit
        endif

        nReversed*=nMult
        nReversed+=nDigit // Adiciona o digito extraido

    end while

    // Aplica o sinal e valida intervalo
    nReversed*=nSign
    if (((nReversed<nMin).or.(nReversed>nMax)))
        nReversed:=0x0
    endif

    return(nReversed)

static function hb_NToC(nValue as numeric) as character
return(LTrim(Str(nValue)))

static function hb_Default(/*@*/uVar as variant,uDefault as variant) as variant
    if (uVar==nil)
        uVar:=uDefault
    endif
return(uVar)

static function __ConOut(vList as variadic)

    local cOut:="",cValType as character

    local nIdx as numeric

    local uValue as variant

    begin sequence

        if (vList==nil)
            break
        endif

        for nIdx:=1 to vList:vCount
            uValue:=vList:vArgs[nIdx]
            cValType:=ValType(uValue)
            if (cValType=="N")
                cOut+=hb_NToC(uValue)
            else
                cOut+=cValToChar(uValue)
            endif
        next nAccentuation

    end sequence

    return(cOut)
