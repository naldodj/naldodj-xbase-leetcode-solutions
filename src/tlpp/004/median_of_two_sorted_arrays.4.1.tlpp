/*
    4. Median of Two Sorted Arrays

    Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

    The overall run time complexity should be O(log (m+n)).

    Example 1:

    Input: nums1 = [1,3], nums2 = [2]
    Output: 2.00000
    Explanation: merged array = [1,2,3] and median is 2.

    Example 2:

    Input: nums1 = [1,2], nums2 = [3,4]
    Output: 2.50000
    Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.

    Constraints:

    nums1.length == m
    nums2.length == n
    0 <= m <= 1000
    0 <= n <= 1000
    1 <= m + n <= 2000
    -106 <= nums1[i], nums2[i] <= 106

    Released to Public Domain.
    --------------------------------------------------------------------------------------
*/
namespace dna.tech

procedure u_MainMedianOfTwoSortedArrays_4_1()

    local aNums1 as array
    local aNums2 as array
    local nMedian as numeric

    aNums1 := {1, 3}
    aNums2 := {2}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {1, 2}
    aNums2 := {3, 4}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {0}
    aNums2 := {3, 4}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {1,5}
    aNums2 := {2,3,4,6}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {2,7}
    aNums2 := {1,3,4,5,6}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {2,7}
    aNums2 := {1,3,4,5,6,8}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {1,3}
    aNums2 := {2}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {1,2}
    aNums2 := {3,4}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {1,4}
    aNums2 := {2,3}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {0}
    aNums2 := {3,4}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {2,5,7}
    aNums2 := {1,3}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {1,2,3}
    aNums2 := {4,5,6}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {1,3,8}
    aNums2 := {2,4,5}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {0,0}
    aNums2 := {0,0}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {}
    aNums2 := {1}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {2}
    aNums2 := {}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {21,33,41}
    aNums2 := {14,15,16}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    aNums1 := {3,121,133,141}
    aNums2 := {5,114,115,116}
    nMedian := FindMedianSortedArrays(aNums1, aNums2)
    MsgInfo("FindMedianSortedArrays("+FWJSONSerialize(aNums1)+","+FWJSONSerialize(aNums2)+") => Median: "+LTrim(Str(nMedian)),ProcName())

    return

static function FindMedianSortedArrays(aNums1, aNums2)

    local aMerged as array
    local nLen,nLen1,nLen2 as numeric
    local nMid as numeric

    // Combina e ordena os arrays
    nLen1:=Len(aNums1)
    nLen2:=Len(aNums2)

    if (nLen1==0)
        aNums1:=aFill(aSize(aNums1,1),0)
        nLen1:=1
    endif

    if (nLen2==0)
        aNums2:=aFill(aSize(aNums2,1),0)
        nLen2:=1
    endif

    aMerged:=Array(nLen1+Len(aNums2))
    aCopy(aNums1,@aMerged,1,nLen1,1)
    aCopy(aNums2,@aMerged,1,nLen2,nLen1+1)
    aSort(aMerged)

    nLen := Len(aMerged)
    nMid := Int(nLen / 2)

    // Verifica se o número de elementos é ímpar
    if nLen % 2 == 1
        return aMerged[nMid + 1] // Ýndice ajustado para 1-based
    else
        // Caso par, calcula a média dos dois elementos centrais
        return (aMerged[nMid] + aMerged[nMid + 1]) / 2.0
    endif
